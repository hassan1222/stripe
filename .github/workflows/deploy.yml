name: Deploy to DigitalOcean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H 159.223.118.251 >> ~/.ssh/known_hosts

    - name: Create environment files
      run: |
        # Create server .env file locally
        cat > server_env_temp << EOF
        NODE_ENV=production
        PORT=5000
        MONGODB_URI=${{ secrets.MONGODB_URI }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        UPLOAD_DIR=uploads/
        EOF
        
        # Create client .env file locally
        cat > client_env_temp << EOF
        REACT_APP_API_URL=http://159.223.118.251/api/auth
        REACT_APP_PRODUCTS_API_URL=http://159.223.118.251/api/products
        REACT_APP_UPLOADS_URL=http://159.223.118.251/uploads
        REACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_51ROPv12arKXlXqJ8hHB2DiKoAGAXsPTbwaUT4s2edCtrCOIMtJ6RrA3eLHSiQlIeuMrXSMSeNR4L9YEgc6oVNZiW009rUEk60d
        EOF

    - name: Deploy to server
      run: |
        # Copy environment files to server
        scp server_env_temp root@159.223.118.251:/tmp/server_env_temp
        scp client_env_temp root@159.223.118.251:/tmp/client_env_temp
        
        # Deploy application
        ssh root@159.223.118.251 << 'EOF'
          # Navigate to app directory
          cd /root
          
          # Stop existing containers first
          cd stripe 2>/dev/null && docker-compose down || true
          
          # Remove existing code and clone fresh
          rm -rf stripe
          git clone https://github.com/${{ github.repository }} stripe
          cd stripe
          
          # Create nginx.conf from default.conf if it doesn't exist
          if [ ! -f nginx.conf ] && [ -f nginx/default.conf ]; then
            cp nginx/default.conf nginx.conf
          elif [ -f default.conf ]; then
            cp default.conf nginx.conf
          fi
          
          # Move environment files to correct locations
          mv /tmp/server_env_temp server/.env
          mv /tmp/client_env_temp client/.env
          
          # Clean up Docker to free space
          docker system prune -f
          
          # Build and start containers
          docker-compose up -d --build
          
          # Show what's running
          echo "=== Container Status ==="
          docker ps
          
          echo "=== Container Logs ==="
          docker-compose logs --tail=20
        EOF

    - name: Wait for services to start
      run: |
        echo "Waiting 60 seconds for all services to start..."
        sleep 60

    - name: Health check
      run: |
        echo "=== Health Check ==="
        
        # Check if containers are running
        ssh root@159.223.118.251 'cd /root/stripe && docker ps'
        
        # Test different endpoints
        echo "Testing main endpoint..."
        curl -f http://159.223.118.251 && echo "✅ Main site works" || echo "❌ Main site failed"
        
        echo "Testing API endpoint..."
        curl -f http://159.223.118.251/api/ && echo "✅ API works" || echo "⚠️ API might not have root endpoint"
        
        # Check individual services
        echo "Testing frontend directly..."
        curl -f http://159.223.118.251:3000 && echo "✅ Frontend works" || echo "❌ Frontend failed"
        
        echo "Testing backend directly..."
        curl -f http://159.223.118.251:5000 && echo "✅ Backend works" || echo "❌ Backend failed"
        
    - name: Deployment summary
      if: always()
      run: |
        if curl -s http://159.223.118.251 > /dev/null; then
          echo "🎉 Deployment successful! App is running at http://159.223.118.251"
        else
          echo "⚠️ Deployment completed but health check failed. Check container logs."
          ssh root@159.223.118.251 'cd /root/stripe && docker-compose logs'
        fi